# Correlation matrix
cor(dataset)
# PCA
PCA <- JG_pca(dataset)
varianceScaled <- PCA$varianceExplained / sum(PCA$varianceExplained)
k <- length(varianceScaled[cumsum(varianceScaled)<= 0.95])
barplot(varianceScaled, main = 'Variance explained', xlab = 'Features', ylab = 'Variance explained', col = 'indianred')
# Project data
k <- 8
dataProjected <- dataset %*% PCA$components[,1:k]
# Correlation matrix
cor(dataProjected)
# Generating dataset
nCol <- 5
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
dataset=cbind(dataset,dataset[,1]^2*cos(dataset[,1]))
dataset=cbind(dataset,dataset[,1]^2*sin(dataset[,1]))
dataset=cbind(dataset,dataset[,1]^2*tanh(dataset[,2]))
# Correlation matrix
cor(dataset)
# PCA
PCA <- JG_pca(dataset)
varianceScaled <- PCA$varianceExplained / sum(PCA$varianceExplained)
k <- length(varianceScaled[cumsum(varianceScaled)<= 0.95])
barplot(varianceScaled, main = 'Variance explained', xlab = 'Features', ylab = 'Variance explained', col = 'indianred')
# Project data
k <- 8
dataProjected <- dataset %*% PCA$components[,1:k]
# Correlation matrix
cor(dataProjected)
# Generating dataset
nCol <- 4
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
dataset=cbind(dataset,dataset[,1]^2)
dataset=cbind(dataset,dataset[,2]^2)
dataset=cbind(dataset,dataset[,4]^2)
# Correlation matrix
cor(dataset)
# PCA
PCA <- JG_pca(dataset)
varianceScaled <- PCA$varianceExplained / sum(PCA$varianceExplained)
k <- length(varianceScaled[cumsum(varianceScaled)<= 0.95])
barplot(varianceScaled, main = 'Variance explained', xlab = 'Features', ylab = 'Variance explained', col = 'indianred')
# Project data
k <- 7
dataProjected <- dataset %*% PCA$components[,1:k]
# Correlation matrix
cor(dataProjected)
View(dataset)
View(dataset)
nCol <- 4
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
# Dependent variables
dataset=cbind(dataset,dataset[,1]^2)
dataset=cbind(dataset,dataset[,2]^2)
dataset=cbind(dataset,dataset[,4]^2)
# PCA
PCA <- JG_pca(dataset)
varianceScaled <- PCA$varianceExplained / sum(PCA$varianceExplained)
k <- length(varianceScaled[cumsum(varianceScaled)<= 0.95])
barplot(varianceScaled, main = 'Variance explained', xlab = 'Features', ylab = 'Variance explained', col = 'indianred')
# Exercise 4: Data preparation
# Javier Galindos
rm(list=ls())
library("rstudioapi")
set.seed(123)
# PCA
JG_pca <- function(dataset){
dataset <- scale(dataset, center = FALSE, scale = TRUE)
mu <- colMeans(dataset)
data_centered <- matrix(, nrow= nrow(dataset), ncol = ncol(dataset))
for (i in seq(1:ncol(dataset))){
data_centered[,i] <- dataset[,i]- mu[i]  # center the data
}
C <- cov(data_centered)  # describe each axis variation
eigenObject <- eigen(C)
eigenVectors <- eigenObject$vectors
eigenValues <- eigenObject$values
return(list(components = eigenVectors, varianceExplained = eigenValues))
}
JG_pca_project <- function(dataset, varianceExplained){
PCA <- JG_pca(dataset)
varianceScaled <- PCA$varianceExplained / sum(PCA$varianceExplained)
# Obtain k components for specific variability
k <- length(varianceScaled[cumsum(varianceScaled)<= varianceExplained])
dataProjected <- dataset %*% PCA$components[,1:k]
return (dataProjected)
}
# Generating dataset
# Independent variables
nCol <- 4
dataset <- matrix(rnorm(nCol* 500),ncol= nCol)
# Dependent variables
dataset=cbind(dataset,dataset[,1]^2)
dataset=cbind(dataset,dataset[,2]^2)
dataset=cbind(dataset,dataset[,4]^2)
# Correlation matrix before PCA
cor(dataset)
# PCA
PCA <- JG_pca(dataset)
varianceScaled <- PCA$varianceExplained / sum(PCA$varianceExplained)
k <- length(varianceScaled[cumsum(varianceScaled)<= 0.95])
barplot(varianceScaled, main = 'Variance explained', xlab = 'Features', ylab = 'Variance explained', col = 'indianred')
rm(list = ls()) # Remove all the objects we created so far.
library("rstudioapi")
# Set working directory
setwd(dirname(getActiveDocumentContext()$path))
getwd()
library(igraph) # Load the igraph package
library(gdata) # Distances for paths
# DATASET 1: edgelist
nodes <- read.csv("Datasets/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Datasets/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
net.dir <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net.undir <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
# Remove loops and multiple
net.dir <- simplify(net.dir, remove.multiple = T, remove.loops = T)
net.undir <- simplify(net.undir, remove.multiple = T, remove.loops = T)
plot(net.dir,edge.arrow.size=.4,edge.curved=0)
plot(net.undir,edge.arrow.size=.4,edge.curved=0)
graph_AM <- as_adjacency_matrix(net.undir, attr="weight")
graphMatrix <- as.matrix(graph_AM)
graph_AM.dir <- as_adjacency_matrix(net.dir, attr="weight")
graphMatrix.dir <- as.matrix(graph_AM.dir)
JG_LCC <- function(graphMatrix){
LCC <- matrix(,nrow = nrow(graphMatrix),1)
nRow <- nrow(graphMatrix)
rownames(LCC) <- rownames(graphMatrix)
for(i in 1:nRow) {
neigh <- which(graphMatrix[,i] > 0)
if (length(neigh) > 0){
nr <- length(neigh)
count = 0
for(j in 1 : (length(neigh) - 1)) {
for(k in (j + 1) : length(neigh)){
if(graphMatrix[neigh[j],neigh[k]]>0)
count <- count+1
}
}
LCC[i] <- ((2*count) / (nr*(nr-1)))
}
else {
LCC[i] <- 0
}
}
return(LCC)
}
lcc<- JG_LCC(graphMatrix)
lcc
transitivity(net.undir, type="local")
JG_DC <- function(graphMatrix) {
DC <- matrix(0, nrow = nrow(graphMatrix), 1)
nRow <- nrow(graphMatrix)
rownames(DC) <- rownames(graphMatrix)
for(i in 1:nRow) {
count <- 0
for(j in 1:nRow) {
if(graphMatrix[i,j] > 0 & i != j) {
count <- count+1
}
DC[i] <- count / (nRow - 1)
}
}
return(DC)
}
dc <- JG_DC(graphMatrix)
dc
degree(net.undir, mode="total")/(length(V(net.undir))-1)
JG_DP <- function(graphMatrix) {
DP <- matrix(0, nrow = nrow(graphMatrix), 1)
nRow <- nrow(graphMatrix)
rownames(DP) <- rownames(graphMatrix)
for (i in 1:nRow) {
count <- 0
for(j in 1:nRow) {
# In
if(graphMatrix[j,i] > 0 & i!=j ){
count<-count+1
}
DP[i] <- count / (nRow-1)
}
}
return(DP)
}
dp <- JG_DP(graphMatrix.dir)
dp
degree(net.dir, mode="in")/(length(V(net.undir))-1)
JG_Greg <- function(graphMatrix) {
Greg <- matrix(0, nrow = nrow(graphMatrix), 1)
nRow <- nrow(graphMatrix)
rownames(Greg) <- rownames(graphMatrix)
for (i in 1:nRow) {
count <- 0
for(j in 1:nRow) {
# Out
if(graphMatrix[i,j] > 0 & i!=j ){
count<-count+1
}
Greg[i] <- count / (nRow-1)
}
}
return(Greg)
}
greg <- JG_Greg(graphMatrix.dir)
greg
degree(net.dir, mode="out")/(length(V(net.undir))-1)
JG_CC <- function(graphMatrix){
# Convert to a Graph object to compute distances
Graph <- graph.adjacency(graphMatrix, weighted=NULL, mode = "undirected")
# Get the distances of the paths
Dist <- distances(Graph, v=V(Graph), to=V(Graph), mode = "all", weights = NULL)
CC <- matrix(,nrow = nrow(graphMatrix), 1)
nRow <- nrow(graphMatrix)
rownames(CC) <- rownames(graphMatrix)
for (i in 1:nRow) {
CC[i] <- 1 / (sum(Dist[i,]) / (nRow-1))
}
return(CC)
}
cc <- JG_CC(graphMatrix)
cc
closeness(net.undir, mode="all", weights=NA) *(length(V(net.dir))-1)
JG_Prox <- function(graphMatrix){
# Convert to a Graph object to compute distances
Graph <- graph.adjacency(graphMatrix, weighted=NULL, mode = "directed")
# Get the distances of the paths
Dist <- distances(Graph, v=V(Graph), to=V(Graph))
Prox <- matrix(,nrow = nrow(graphMatrix), 1)
nRow <- nrow(graphMatrix)
rownames(Prox) <- rownames(graphMatrix)
for (i in 1:nRow) {
# influence is defined as the follower of ith element.
influence <- which(Dist[i,] != Inf)
influFrac <- length(influence) / (nrow(Dist) - 1)
avg_dist <- sum(Dist[i,influence]) / length(influence)
Prox[i] <- influFrac / avg_dist
}
return(Prox)
}
prox <- JG_Prox(graphMatrix.dir)
prox
JG_BC <- function(graphMatrix){
# Convert to a Graph object to compute distances
Graph <- graph.adjacency(graphMatrix, weighted=NULL, mode = "directed")
BC <- matrix(,nrow = nrow(graphMatrix), 1)
nRow <- nrow(graphMatrix)
rownames(BC) <- rownames(graphMatrix)
for (i in 1:nRow) {
# Fraction of pairs
fraction <- 0
for(j in 1:nRow) {
total <- 0
# Get shortest paths
shortest_paths <- all_shortest_paths(Graph,
from=V(Graph)[j],
to=V(Graph),
mode="in")[["res"]]
for(sp in shortest_paths) {
count <- sum(V(Graph)[i] %in% sp)
total <- total + count
}
fraction <- fraction + total/length(shortest_paths)
}
BC[i]<-fraction / ((nRow)*(nRow-1))
}
return(BC)
}
betweenness(net.dir, directed=T, weights=NULL)/ ((length(V(net.dir))-1)*length(V(net.dir)))
betweenness(net.dir, directed=T, weights=NA)/ ((length(V(net.dir))-1)*length(V(net.dir)))
rm(list = ls()) # Remove all the objects we created so far.
library("rstudioapi")
# Set working directory
setwd(dirname(getActiveDocumentContext()$path))
getwd()
library(igraph) # Load the igraph package
# DATASET 1: edgelist
nodes <- read.csv("Datasets/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Datasets/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
net.dir <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net.undir <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
# Remove loops and multiple
net.dir <- simplify(net.dir, remove.multiple = T, remove.loops = T)
net.undir <- simplify(net.undir, remove.multiple = T, remove.loops = T)
plot(net.dir,edge.arrow.size=.4,edge.curved=0)
plot(net.undir,edge.arrow.size=.4,edge.curved=0)
graph_AM <- as_adjacency_matrix(net.undir, attr="weight")
graphMatrix <- as.matrix(graph_AM)
graph_AM.dir <- as_adjacency_matrix(net.dir, attr="weight")
graphMatrix.dir <- as.matrix(graph_AM.dir)
JG_BC <- function(net){
# Convert to a Graph object to compute distances
#Graph <- graph.adjacency(graphMatrix, weighted=NULL, mode = "directed")
nRow <- length(V(net))
BC <- matrix(,nrow = nRow, 1)
#rownames(BC) <- rownames(graphMatrix)
for (i in 1:nRow) {
# Fraction of pairs
fraction <- 0
for(j in 1:nRow) {
total <- 0
# Get shortest paths
q_jk <- all_shortest_paths(net,
from=V(net)[j],
to=V(net),
mode="in")[["res"]]
for(sp in q_jk) {
count <- sum(V(net)[i] %in% sp)
total <- total + count
}
fraction <- fraction + total/length(q_jk)
}
BC[i]<-fraction / ((nRow)*(nRow-1))
}
return(BC)
}
bc <- JG_BC(net.dir)
JG_BC <- function(net){
# Convert to a Graph object to compute distances
#Graph <- graph.adjacency(graphMatrix, weighted=NULL, mode = "directed")
nRow <- length(V(net))
BC <- matrix(,nrow = nRow, 1)
#rownames(BC) <- rownames(graphMatrix)
for (i in 1:nRow) {
# Fraction of pairs
fraction <- 0
for(j in 1:nRow) {
total <- 0
# Get shortest paths
q_jk <- suppressWarnings( all_shortest_paths(net,
from=V(net)[j],
to=V(net),
mode="in")[["res"]]
)
for(sp in q_jk) {
count <- sum(V(net)[i] %in% sp)
total <- total + count
}
fraction <- fraction + total/length(q_jk)
}
BC[i]<-fraction / ((nRow)*(nRow-1))
}
return(BC)
}
bc <- JG_BC(net.dir)
bc
betweenness(net.dir, directed=T, weights=NA)/ ((length(V(net.dir))-1)*length(V(net.dir)))
vertex=1
vertex=1
sum(sapply(get.all.shortest.paths(g,2,3)$res,function(x){vertex %in% x}))
vertex=1
sum(sapply(get.all.shortest.paths(net.dir,2,3)$res,function(x){vertex %in% x}))
vertex=1
sum(sapply(get.all.shortest.paths(net.undir,2,3)$res,function(x){vertex %in% x}))
vertex=4
sum(sapply(get.all.shortest.paths(net.undir,1,11)$res,function(x){vertex %in% x}))
vertex=4
sum(sapply(get.all.shortest.paths(net.undir,5,13)$res,function(x){vertex %in% x}))
all_shortest_paths(net.undir,5,13)
length(all_shortest_paths(net.undir,5,13)$res)
length(all_shortest_paths(net.undir,14,11)$res)
length(all_shortest_paths(net.undir,1,11)$res)
vertex=4
sum(sapply(get.all.shortest.paths(net.undir,V(net)[5],V(net)[13])$res,function(x){vertex %in% x}))
vertex=4
sum(sapply(get.all.shortest.paths(net.undir,V(net.undir)[5],V(net.undir)[13])$res,function(x){vertex %in% x}))
all_shortest_paths(net.undir,5,13)
length(all_shortest_paths(net.undir,V(net.undir)[1],V(net.undir)[11])$res)
length(all_shortest_paths(net.undir,V(net.undir)[1],V(net.undir)[11])$res)
sum(sapply(get.all.shortest.paths(net.undir,V(net.undir)[5],V(net.undir)[13])$res,function(x){vertex %in% x}))
all_shortest_paths(net.undir,5,13)
length(all_shortest_paths(net.undir,V(net.undir)[1],V(net.undir)[11])$res)
JG_BC <- function(net){
# Convert to a Graph object to compute distances
#Graph <- graph.adjacency(graphMatrix, weighted=NULL, mode = "directed")
nRow <- length(V(net))
BC <- matrix(,nrow = nRow, 1)
#rownames(BC) <- rownames(graphMatrix)
for (i in 1:nRow) {
# Fraction of pairs
f_jk <- 0
for(j in 1:nRow) {
total <- 0
for(k in 1:nRow) {
if (j < k){
q_jk <- all_shortest_paths(net,j,k)$res
q_jk_i <- sum(sapply(get.all.shortest.paths(net,V(net)[j],V(net)[k])$res,function(x){i %in% x}))
f_jk <- f_jk +  q_jk_i / length(q_jk)
}
}
}
BC[i]<-f_jk / ((nRow)*(nRow-1))
}
return(BC)
}
bc <- JG_BC(net.dir)
JG_BC <- function(net){
# Convert to a Graph object to compute distances
#Graph <- graph.adjacency(graphMatrix, weighted=NULL, mode = "directed")
nRow <- length(V(net))
BC <- matrix(,nrow = nRow, 1)
#rownames(BC) <- rownames(graphMatrix)
for (i in 1:nRow) {
# Fraction of pairs
f_jk <- 0
for(j in 1:nRow) {
total <- 0
for(k in 1:nRow) {
if (j < k){
q_jk <- all_shortest_paths(net,j,k)$res
q_jk_i <- sum(sapply(get.all.shortest.paths(net,j,k)$res,function(x){i %in% x}))
f_jk <- f_jk +  q_jk_i / length(q_jk)
}
}
}
BC[i]<-f_jk / ((nRow)*(nRow-1))
}
return(BC)
}
bc <- JG_BC(net.dir)
bc
JG_BC <- function(net){
# Convert to a Graph object to compute distances
#Graph <- graph.adjacency(graphMatrix, weighted=NULL, mode = "directed")
nRow <- length(V(net))
BC <- matrix(,nrow = nRow, 1)
#rownames(BC) <- rownames(graphMatrix)
for (i in 1:nRow) {
# Fraction of pairs
f_jk <- 0
for(j in 1:nRow) {
for(k in 1:nRow) {
if (j < k){
q_jk <- all_shortest_paths(net,j,k)$res
vertex = i
q_jk_i <- sum(sapply(get.all.shortest.paths(net,j,k)$res,function(x){vertex %in% x}))
f_jk <- f_jk +  q_jk_i / length(q_jk)
}
}
}
BC[i]<-f_jk / ((nRow)*(nRow-1))
}
return(BC)
}
bc <- JG_BC(net.dir)
debugSource('~/OneDrive/OneDrive - Universidad Politécnica de Madrid/Documentos/MSc DM/2ºDM/Data mining/HA/ha3-data-mining/Debug.R')
debugSource('~/OneDrive/OneDrive - Universidad Politécnica de Madrid/Documentos/MSc DM/2ºDM/Data mining/HA/ha3-data-mining/Debug.R')
debugSource('~/OneDrive/OneDrive - Universidad Politécnica de Madrid/Documentos/MSc DM/2ºDM/Data mining/HA/ha3-data-mining/Debug.R')
rm(list = ls()) # Remove all the objects we created so far.
library("rstudioapi")
# Set working directory
setwd(dirname(getActiveDocumentContext()$path))
getwd()
library(igraph) # Load the igraph package
# DATASET 1: edgelist
nodes <- read.csv("Datasets/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Datasets/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
net.dir <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
net.undir <- graph_from_data_frame(d=links, vertices=nodes, directed=F)
# Remove loops and multiple
net.dir <- simplify(net.dir, remove.multiple = T, remove.loops = T)
net.undir <- simplify(net.undir, remove.multiple = T, remove.loops = T)
plot(net.dir,edge.arrow.size=.4,edge.curved=0)
plot(net.undir,edge.arrow.size=.4,edge.curved=0)
graph_AM <- as_adjacency_matrix(net.undir, attr="weight")
graphMatrix <- as.matrix(graph_AM)
graph_AM.dir <- as_adjacency_matrix(net.dir, attr="weight")
graphMatrix.dir <- as.matrix(graph_AM.dir)
JG_BC <- function(net){
# Convert to a Graph object to compute distances
#Graph <- graph.adjacency(graphMatrix, weighted=NULL, mode = "directed")
nRow <- length(V(net))
BC <- matrix(,nrow = nRow, 1)
#rownames(BC) <- rownames(graphMatrix)
for (i in 1:nRow) {
# Fraction of pairs
f_jk <- 0
for(j in 1:nRow) {
for(k in 1:nRow) {
if (j < k){
q_jk <- all_shortest_paths(net,j,k)$res
vertex = i
q_jk_i <- sum(sapply(get.all.shortest.paths(net,j,k)$res,function(x){vertex %in% x}))
f_jk <- f_jk +  q_jk_i / length(q_jk)
}
}
}
BC[i]<-f_jk / ((nRow)*(nRow-1))
}
return(BC)
}
bc <- JG_BC(net.dir)
bc
debugSource('~/OneDrive/OneDrive - Universidad Politécnica de Madrid/Documentos/MSc DM/2ºDM/Data mining/HA/ha3-data-mining/Debug.R')
debugSource('~/OneDrive/OneDrive - Universidad Politécnica de Madrid/Documentos/MSc DM/2ºDM/Data mining/HA/ha3-data-mining/Debug.R')
# Set working directory
setwd(dirname(getActiveDocumentContext()$path))
getwd()
library(igraph) # Load the igraph package
debugSource('~/OneDrive/OneDrive - Universidad Politécnica de Madrid/Documentos/MSc DM/2ºDM/Data mining/HA/ha3-data-mining/Debug.R')
debugSource('~/OneDrive/OneDrive - Universidad Politécnica de Madrid/Documentos/MSc DM/2ºDM/Data mining/HA/ha3-data-mining/Debug.R')
